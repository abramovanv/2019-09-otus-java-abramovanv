import sun.plugin2.message.Message;

import java.util.*;

public class Main {


    public static void main(String[] args) {
        DIArrayList<String> myarrlst = new DIArrayList();
        ArrayList<String> defarrlst = new ArrayList<>();


        for (int i = 1; i <= 30; i++) {
            defarrlst.add("DefaultArrayList - " + i);
        }

        for (int i1 = 1; i1 <= 40; i1++) {
            myarrlst.add("MyArrayList - " + i1);
        }


        try {
            Collections.copy(myarrlst, defarrlst);
        } catch (Exception e) {
            System.out.println("Ошибка копирования Collections.copy - " + e);
        }

        try {
            Collections.addAll(myarrlst, "first add", "second add", "third add", "forth add");
            myarrlst.addAll(defarrlst);
        } catch (Exception e) {
            System.out.println("Ошибка добавления элементов Collections.addAll - " + e);
        }

        try {
            Collections.sort(myarrlst, null);
        } catch (Exception e) {
            System.out.println("Ошибка сортировки  - Collections.sort" + e);
        }


        for (int jj = 0; jj <= myarrlst.size() - 1; jj++) {
            System.out.println(myarrlst.get(jj));
        }

    }
}

import java.util.*;


public class DIArrayList<T> implements List<T> {

    private T[] myarray;
    private int index;
    final static private int DEFAULT_SIZE = 30;


    public DIArrayList() {
        myarray = (T[]) new Object[DEFAULT_SIZE];
    }


    @Override
    public boolean add(T newelement) {
        if (index == myarray.length) {grow(2);}
        myarray[index] = newelement;
        index++;
        return true;
    }

    private void grow(int count) {
     myarray = Arrays.copyOf(myarray, myarray.length+count);
   }

    @Override
    public boolean addAll(Collection<? extends T> collection) {
        Object[]  tmparray = collection.toArray();
        int tmparraylen = tmparray.length;
        grow(tmparraylen);
        System.arraycopy(tmparray, 0, myarray, myarray.length-tmparraylen, tmparraylen);
        return tmparraylen != 0;
    }


    @Override
    public T get(int i) {
        if (i >= myarray.length || i < 0) {
            throw new IndexOutOfBoundsException("Неверный индекс: " + i);
        }
        return myarray[i];
    }

    @Override
    public T set(int i, T t) {

        if (i >= myarray.length || i < 0) {
            throw new IndexOutOfBoundsException("Неверный индекс: " + i);
        }
        if (i < myarray.length) {
            myarray[i] = t;
        }
        return myarray[i];
    }

    @Override
    public ListIterator<T> listIterator() {
        return new MyListIterator<T>(index, myarray);
    }

    @Override
    public int size() {
        return myarray.length;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public Object[] toArray() {
        return Arrays.copyOf(myarray, myarray.length);

    }

    @Override
    public boolean addAll(int i, Collection<? extends T> collection) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean removeAll(Collection<?> collection) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean retainAll(Collection<?> collection) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void add(int i, T t) {
        throw new UnsupportedOperationException();
    }

    @Override
    public T remove(int i) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int indexOf(Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int lastIndexOf(Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public ListIterator<T> listIterator(int i) {
        throw new UnsupportedOperationException();
    }

    @Override
    public List<T> subList(int i, int i1) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean remove(Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean containsAll(Collection<?> collection) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean contains(Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Iterator<T> iterator() {
        throw new UnsupportedOperationException();}

    @Override
    public <T1> T1[] toArray(T1[] t1s) {
        throw new UnsupportedOperationException();}


}

import java.util.ConcurrentModificationException;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class MyListIterator<T> implements ListIterator<T> {

    private int cursor = 0;
    private int index;
    private T[] myarray;

    public MyListIterator(int index_in, T[] myarray_in) {
        index = index_in;
        myarray = myarray_in;
    }


    @Override
    public boolean hasNext() {
        if (index >= myarray.length) {
            return false;
        }
        return true;
    }

    @Override
    public T next() {
        int i = cursor;
        if (i >= myarray.length /*size*/) {
            throw new NoSuchElementException();
        }
        T[] myarray2 = myarray;
        if (i > myarray2.length) {
            throw new ConcurrentModificationException();
        }
        cursor = i + 1;
        return (T) myarray2[i];
    }

    @Override
    public boolean hasPrevious() {
        return false;
    }

    @Override
    public T previous() {
        return null;
    }

    @Override
    public int nextIndex() {
        return 0;
    }

    @Override
    public int previousIndex() {
        return 0;
    }

    @Override
    public void remove() {

    }

    @Override
    public void set(T t) {
        myarray[cursor - 1] = t;
    }

    @Override
    public void add(T t) {

    }
}
